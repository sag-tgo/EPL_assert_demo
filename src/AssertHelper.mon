/* Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors

 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.apamax.test;

using com.apama.exceptions.Exception;

event AssertHelper {

	/**
	 * Log <message> at <logLevel>
	 * @param message - the message to log.
	 * @param logLevel - integer value of the level to log at (0-7, 0=OFF, 7=TRACE).
	 */
	static action logMessage(string message, integer logLevel) {
		if logLevel = 0 {
			log message at OFF;
		} else if logLevel = 1 {
			log message at CRIT;
		} else if logLevel = 2 {
			log message at FATAL;
		} else if logLevel = 3 {
			log message at ERROR;
		} else if logLevel = 4 {
			log message at WARN;
		} else if logLevel = 5 {
			log message at INFO;
		} else if logLevel = 6 {
			log message at DEBUG;
		} else if logLevel = 7 {
			log message at TRACE;
		} else {
			throw Exception("Unsupported log level: " + logLevel.toString(), "IllegalArgumentException");
		}
	}

	/**
	 * Logs <message> at ERROR.
	 * @param message - the message to log.
	 */
	static action logAtError(string message) {
		logMessage(message, 3);
	}

	/**
	 * Logs <message> at ERROR then throws a FailedAssertException.
	 * @param message - the message to log and to go with the exception.
	 */
	static action throwWithError(string message) {
		// In case the exception is caught by user code and silently ignored.
		logAtError(message);
		// If this is uncaught it will be logged at error by default and the monitor will terminate.
		throw Exception(message, "FailedAssertException");
	}

	/**
	 * Logs <message> at ERROR then terminates the monitor with the die statement.
	 * @param message - the message to log.
	 */
	static action dieWithError(string message) {
		logAtError(message);
		die;
	}
}
