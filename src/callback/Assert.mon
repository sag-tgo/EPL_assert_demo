

package com.apamax.test.callback;

using com.apama.exceptions.Exception;

/**
 * An assertion class for testing epl applications
 */
event Assert {

	action<string> onFailedAssertion;
	boolean enabled;

	static action create(boolean enabled, action<string> failedAssertCallback) returns Assert {
		Assert result := new Assert;
		result.enabled := enabled;
		result.onFailedAssertion := failedAssertCallback;
		return result;
	}

	/**
	 * Fail an assertion.
	 * @param message the reason for the assertion failure.
	 */
	action fail(string message) {
		if not enabled {
			return;
		}

		onFailedAssertion(message);
	}

	/**
	 * Assert that a boolean value is true.
	 * @param value the value that is being asserted is true.
	 * @param message description of what's being asserted.
	 */
	action isTrue(boolean value, string message) {
		if not enabled {
			return;
		}

		if not value {
			fail(message);
		}
	}

	/**
	 * Assert that a boolean value is false.
	 * @param value the value that is being asserted is false.
	 * @param message description of what's being asserted.
	 */
	action isFalse(boolean value, string message) {
		if not enabled {
			return;
		}

		if value {
			fail(message);
		}
	}

	/**
	 * Assert that two values are equal.
	 * Note: This is not a deep equality check (which is more computationally expensive)
	 * @param actual the actual value.
	 * @param expected the expected value.
	 * @param message description of what's being asserted.
	 */
	action equals(any actual, any expected, string message) {
		if not enabled {
			return;
		}

		if actual != expected {
			fail(message);
		}
	}

	// action isGreaterThan, isLessThan
	// action deepEquals
}
