/* Copyright (c) 2020 Software AG, Darmstadt, Germany and/or its licensors

 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.apamax.test;

using com.apama.correlator.Component;
using com.apama.correlator.Logging;
using com.apama.exceptions.Exception;

/**
 * An event providing static actions to help using the Assert event.
 * @version 0.1
 */
event AssertHelper {

	/**
	 * Logs message at ERROR.
	 * 
	 * Example:
<code>
Assert asserter := Assert.create(AssertHelper.logAtError);
</code>
	 * @param message the message to log.
	 */
	static action logAtError(string message) {
		log message at ERROR;
	}

	/**
	 * Logs message at ERROR then throws a FailedAssertException.
	 * 
	 * Example:
<code>
Assert asserter := Assert.create(AssertHelper.throwWithError);
</code>
	 * @param message the message to log and to go with the exception.
	 */
	static action throwWithError(string message) {
		logAtError(message);
		throw Exception(message, "FailedAssertException");
	}

	/**
	 * Logs message at ERROR then terminates the monitor with the die statement.
	 * 
	 * Example:
<code>
Assert asserter := Assert.create(AssertHelper.dieWithError);
</code>
	 * @param message the message to log.
	 */
	static action dieWithError(string message) {
		logAtError(message);
		die;
	}

	/**
	 * Checks if the given configuration key is true.
	 * See Apama documentation for Component.getConfigProperties() and
	 * for how to configure the correlator via YAML or command line arguments.
	 * If the given key does not exist, this action will return false.
	 * This action will return true if the value associated with the configuration key
	 * is "true" (case insensitive).
	 * 
	 * Example:
<code>
Assert asserter := Assert.createIf(AssertHelper.isConfigEnabled("asserts"), AssertHelper.logAtError);
</code>
	 * @param key the config key to look up.
	 * @returns true if the configuration option is enabled, false otherwise.
	 */
	static action isConfigEnabled(string key) returns boolean {
		string configValue := Component.getConfigProperties().getOr(key, "");
		return configValue.toLower() = true.toString().toLower();
	}

	/**
	 * Check if the monitor this is called from will log at DEBUG or not.
	 * 
	 * Example:
<code>
Assert asserter := Assert.createIf(AssertHelper.isLoggingAtDebug(), AssertHelper.throwWithError);
</code>
	 * @returns true if the monitor this is called from is configured to log at
	 * DEBUG (or TRACE), false otherwise.
	 */
	static action isLoggingAtDebug() returns boolean {
		boolean result := false;
		try {
			context.throwStdException();
		} catch (com.apama.exceptions.Exception e) {
			sequence<com.apama.exceptions.StackTraceElement> trace := e.getStackTrace();
			string caller := trace[1].getTypeName();
			string level := Logging.getApplicationLogLevel(caller);
			result := level = "DEBUG" or level = "TRACE";
		}
		return result;
	}

}
