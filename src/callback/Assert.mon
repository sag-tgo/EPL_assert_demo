/* Copyright (c) 2020-2021 Software AG, Darmstadt, Germany and/or its licensors

 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.apamax.test;

/**
 * An assertion event to help with testing EPL applications.
 * Monitor-global instances of this event that are auto-initialized by the 
 * correlator will default to log failed assertions at ERROR. If you wish to
 * be explicit or change the default behavior, initialise the instance with one
 * of the create* actions.
 * Instances of events that are local variables need to be explicitly
 * initialized.
 *
 * @version 0.1
 */
event Assert {

	/**
	 * @private
	 * The default assertion failure message prefix.
	 */
	constant string DEFAULT_MESSAGE_PREFIX := "Assertion failed: ";

	/**
	 * @private
	 * Used for lazy initialisation.
	 */
	boolean initialized;

	/**
	 * An action which takes one string paremeter which is invoked if an assertion fails.
	 */
	action<string> onFailedAssertion;

	/**
	 * Enabled/disabled flag.
	 * This allows an optimisation when asserts are disabled and
	 * gives the option of turning asserts on/off at runtime.
	 */
	boolean enabled;

	/**
	 * Prefix on assertion failure messages.
	 */
	string messagePrefix;

	/**
	 * @private
	 * Lazy initialisation action.
	 */
	action init() {
		if not initialized {
			messagePrefix := DEFAULT_MESSAGE_PREFIX;
			onFailedAssertion := logAtError;
			enabled := true;
			initialized := true;
		}
	}

	/**
	 * Create an instance of an Assert event.
	 * @param enabled - true = enabled, false = disabled.
	 * @param failedAssertCallback - The action to invoke if an assertion fails.
	 */
	static action createOpt(boolean enabled, action<string> failedAssertCallback) returns Assert {
		Assert result := new Assert;
		result.messagePrefix := DEFAULT_MESSAGE_PREFIX;
		result.onFailedAssertion := failedAssertCallback;
		result.enabled := enabled;
		result.initialized := true;
		return result;
	}

	/**
	 * Create an instance of an Assert event. The instance will be enabled.
	 * @param failedAssertCallback - The action to invoke if an assertion fails.
	 */
	static action create(action<string> failedAssertCallback) returns Assert {
		return createOpt(true, failedAssertCallback);
	}

	/**
	 * @private
	 * Logs <message> at ERROR.
	 * @param message - the message to log.
	 */
	static action logAtError(string message) {
		log message at ERROR;
	}

	/**
	 * Fail an assertion.
	 * @param message the reason for the assertion failure.
	 */
	action fail(string message) {
		init();
		if not enabled {
			return;
		}

		onFailedAssertion(messagePrefix + message);
	}

	/**
	 * Assert that two values are equal.
	 * Note: This is a deep equality check because EPL's = and != operator
	 * are deep equality operators.
	 * @param actual the actual value.
	 * @param expected the expected value.
	 * @param what description of actual.
	 */
	action equal(any actual, any expected, string what) {
		init();
		if not enabled {
			return;
		}

		if actual != expected {
			fail("Expected '" + what + "' to equal " + expected.valueToString() 
				+ ", got " + actual.valueToString());
		}
	}

	/**
	 * Assert that two values are not equal.
	 * Note: This is a deep equality check because EPL's = and != operator
	 * are deep equality operators.
	 * @param actual the actual value.
	 * @param unexpected the unexpected value.
	 * @param what description of actual.
	 */
	action notEqual(any actual, any unexpected, string what) {
		init();
		if not enabled {
			return;
		}

		if actual = unexpected {
			fail("Expected '" + what + "' to not equal, got " + actual.valueToString());
		}
	}

	/**
	 * Assert that a boolean value is true.
	 * @param value the value that is being asserted is true.
	 * @param what description of value.
	 */
	action isTrue(boolean value, string what) {
		equal(value, true, what);
	}

	/**
	 * Assert that a boolean value is false.
	 * @param value the value that is being asserted is false.
	 * @param what description of value.
	 */
	action isFalse(boolean value, string what) {
		equal(value, false, what);
	}

	/**
	 * Assert that 'actual' is greater than 'min'.
	 * @param actual the actual value
	 * @param min the value that 'actual' should be greater than.
	 * @param what description of actual.
	 */
	action isGreaterThan(any actual, any min, string what) {
		init();
		if not enabled {
			return;
		}

		if not actual > min {
			fail("Expected '" + what + "' to be greater than " + min.valueToString()
				 + ", got " + actual.valueToString());
		}
	}

	/**
	 * Assert that 'actual' is less than 'max'.
	 * @param actual the actual value
	 * @param max the value that 'actual' should be less than.
	 * @param what description of actual.
	 */
	action isLessThan(any actual, any max, string what) {
		init();
		if not enabled {
			return;
		}

		if not actual < max {
			fail("Expected '" + what + "' to be less than " + max.valueToString()
				 + ", got " + actual.valueToString());
		}
	}

	/**
	 * Assert that a value is within a range (inclusive).
	 * @param actual the value that should be within the range.
	 * @param min the minimum value.
	 * @param max the maximum value.
	 * @param what description of actual.
	 */
	action isInRange(any actual, any min, any max, string what) {
		init();
		if not enabled {
			return;
		}

		if not (actual >= min and actual <= max) {
			fail("Expected '" + what 
				+ "' to be >=" + min.valueToString() 
				+ " and <=" + max.valueToString() 
				+ ", got " + actual.valueToString());
		}
	}
}
