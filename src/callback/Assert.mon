
package com.apamax.test;

/**
 * An assertion event to help with testing EPL applications.
 * @version 0.1
 */
event Assert {

	/**
	 * @private
	 * Used for lazy initialisation.
	 */
	boolean initialized;

	/**
	 * An action which takes one string paremeter which is invoked if an assertion fails.
	 */
	action<string> onFailedAssertion;

	/**
	 * Enabled/disabled flag.
	 * This allows an optimisation when asserts are disabled and
	 * gives the option of turning asserts on/off at runtime.
	 */
	boolean enabled;

	/**
	 * @private
	 * Lazy initialisation action.
	 */
	action init() {
		if not initialized {
			initialized := true;
			enabled := true;
			onFailedAssertion := logAtError;
		}
	}

	/**
	 * Create an instance of an Assert event.
	 * @param enabled - true = enabled, false = disabled.
	 * @param failedAssertCallback - The action to invoke if an assertion fails.
	 */
	static action create(boolean enabled, action<string> failedAssertCallback) returns Assert {
		Assert result := new Assert;
		result.initialized := true;
		result.enabled := enabled;
		result.onFailedAssertion := failedAssertCallback;
		return result;
	}

	/**
	 * Logs <message> at ERROR.
	 * @param message - the message to log.
	 */
	static action logAtError(string message) {
		log message at ERROR;
	}

	/**
	 * Fail an assertion.
	 * @param message the reason for the assertion failure.
	 */
	action fail(string message) {
		init();
		if not enabled {
			return;
		}

		onFailedAssertion(message);
	}

	/**
	 * Assert that a boolean value is true.
	 * @param value the value that is being asserted is true.
	 * @param message description of what's being asserted.
	 */
	action isTrue(boolean value, string message) {
		init();
		if not enabled {
			return;
		}

		if not value {
			fail(message);
		}
	}

	/**
	 * Assert that a boolean value is false.
	 * @param value the value that is being asserted is false.
	 * @param message description of what's being asserted.
	 */
	action isFalse(boolean value, string message) {
		init();
		if not enabled {
			return;
		}

		if value {
			fail(message);
		}
	}

	/**
	 * Assert that two values are equal.
	 * Note: This is not a deep equality check (which is more computationally expensive)
	 * @param actual the actual value.
	 * @param expected the expected value.
	 * @param message description of what's being asserted.
	 */
	action equals(any actual, any expected, string message) {
		init();
		if not enabled {
			return;
		}

		if actual != expected {
			fail(message);
		}
	}

	// action isGreaterThan, isLessThan
	// action deepEquals
}
