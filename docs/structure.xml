<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../../" display="com.apamax.test" name="com.apamax.test"><Type category="Event" name="Assert"><Description><![CDATA[An assertion event to help with testing EPL applications. Instances of this event that are created in any way other than using the create action will be lazily initialized to log failed assertions at ERROR. To change the default behavior from that provided by lazy initialisation, or to explicitly declare the behavior, use the create action to create Assert event instances.]]></Description><Summary><![CDATA[An assertion event to help with testing EPL applications. Instances of this event that are created in any way other than using the create action will be lazily initialized to log failed assertions at ERROR. To change the default behavior from that provided by lazy initialisation, or to explicitly declare the behavior, use the create action to create Assert event instances.]]></Summary><TypeParameters/><Version><Description><![CDATA[0.1]]></Description></Version><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="initialized" private="true" type="boolean"><Description/><Summary/><TypeParameters/></Member><Member name="onFailedAssertion" type="action"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[An action which takes one string paremeter which is invoked if an assertion fails.]]></Description><Summary><![CDATA[An action which takes one string paremeter which is invoked if an assertion fails.]]></Summary><TypeParameters/></Member><Member name="enabled" type="boolean"><Description><![CDATA[Enabled/disabled flag. This allows an optimisation when asserts are disabled and gives the option of turning asserts on/off at runtime.]]></Description><Summary><![CDATA[Enabled/disabled flag. This allows an optimisation when asserts are disabled and gives the option of turning asserts on/off at runtime.]]></Summary><TypeParameters/></Member><Action name="equal" staticNature=""><Description><![CDATA[Assert that two values are equal. Note: This is a deep equality check because EPL's = and != operator are deep equality operators.]]></Description><Summary><![CDATA[Assert that two values are equal. Note: This is a deep equality check because EPL's = and != operator are deep equality operators.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="actual" type="any"><Description><![CDATA[the actual value.]]></Description></Parameter><Parameter name="expected" type="any"><Description><![CDATA[the expected value.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[description of what's being asserted.]]></Description></Parameter></Parameters></Action><Action name="init" private="true" staticNature=""><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="fail" staticNature=""><Description><![CDATA[Fail an assertion.]]></Description><Summary><![CDATA[Fail an assertion.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="message" type="string"><Description><![CDATA[the reason for the assertion failure.]]></Description></Parameter></Parameters></Action><Action name="isTrue" staticNature=""><Description><![CDATA[Assert that a boolean value is true.]]></Description><Summary><![CDATA[Assert that a boolean value is true.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="boolean"><Description><![CDATA[the value that is being asserted is true.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[description of what's being asserted.]]></Description></Parameter></Parameters></Action><Action name="isLessThan" staticNature=""><Description><![CDATA[Assert that 'actual' is less than 'value'.]]></Description><Summary><![CDATA[Assert that 'actual' is less than 'value'.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="actual" type="any"><Description><![CDATA[the actual value]]></Description></Parameter><Parameter name="value" type="any"><Description><![CDATA[the value that 'actual' should be less than.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[description of what's being asserted.]]></Description></Parameter></Parameters></Action><Action name="logAtError" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="message" type="string"><Description><![CDATA[- the message to log.]]></Description></Parameter></Parameters></Action><Action name="isGreaterThan" staticNature=""><Description><![CDATA[Assert that 'actual' is greater than 'value'.]]></Description><Summary><![CDATA[Assert that 'actual' is greater than 'value'.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="actual" type="any"><Description><![CDATA[the actual value]]></Description></Parameter><Parameter name="value" type="any"><Description><![CDATA[the value that 'actual' should be greater than.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[description of what's being asserted.]]></Description></Parameter></Parameters></Action><Action name="create" staticNature="static "><Description><![CDATA[Create an instance of an Assert event. The instance will be enabled.]]></Description><Summary><![CDATA[Create an instance of an Assert event. The instance will be enabled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.test" type="Assert"/><Parameters><Parameter name="failedAssertCallback" type="action"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[- The action to invoke if an assertion fails.]]></Description></Parameter></Parameters></Action><Action name="notEqual" staticNature=""><Description><![CDATA[Assert that two values are not equal. Note: This is a deep equality check because EPL's = and != operator are deep equality operators.]]></Description><Summary><![CDATA[Assert that two values are not equal. Note: This is a deep equality check because EPL's = and != operator are deep equality operators.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="actual" type="any"><Description><![CDATA[the actual value.]]></Description></Parameter><Parameter name="unexpected" type="any"><Description><![CDATA[the unexpected value.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[description of what's being asserted.]]></Description></Parameter></Parameters></Action><Action name="isFalse" staticNature=""><Description><![CDATA[Assert that a boolean value is false.]]></Description><Summary><![CDATA[Assert that a boolean value is false.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="boolean"><Description><![CDATA[the value that is being asserted is false.]]></Description></Parameter><Parameter name="message" type="string"><Description><![CDATA[description of what's being asserted.]]></Description></Parameter></Parameters></Action><Action name="createOpt" staticNature="static "><Description><![CDATA[Create an instance of an Assert event.]]></Description><Summary><![CDATA[Create an instance of an Assert event.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="com.apamax.test" type="Assert"/><Parameters><Parameter name="enabled" type="boolean"><Description><![CDATA[- true = enabled, false = disabled.]]></Description></Parameter><Parameter name="failedAssertCallback" type="action"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[- The action to invoke if an assertion fails.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="AssertHelper"><Description><![CDATA[An event providing static actions to help using the Assert event.]]></Description><Summary><![CDATA[An event providing static actions to help using the Assert event.]]></Summary><TypeParameters/><Version><Description><![CDATA[0.1]]></Description></Version><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="throwWithError" staticNature="static "><Description><![CDATA[Logs message at ERROR then throws a FailedAssertException.]]></Description><Summary><![CDATA[Logs message at ERROR then throws a FailedAssertException.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="message" type="string"><Description><![CDATA[- the message to log and to go with the exception.]]></Description></Parameter></Parameters></Action><Action name="isLoggingAtDebug" staticNature="static "><Description><![CDATA[Check if this monitor will log at DEBUG or not.]]></Description><Summary><![CDATA[Check if this monitor will log at DEBUG or not.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[true if the monitor this is called from is configured to log at DEBUG (or TRACE), false otherwise.]]></Description></Returns></Action><Action name="dieWithError" staticNature="static "><Description><![CDATA[Logs message at ERROR then terminates the monitor with the die statement.]]></Description><Summary><![CDATA[Logs message at ERROR then terminates the monitor with the die statement.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="message" type="string"><Description><![CDATA[- the message to log.]]></Description></Parameter></Parameters></Action><Action name="logAtError" staticNature="static "><Description><![CDATA[Logs message at ERROR.]]></Description><Summary><![CDATA[Logs message at ERROR.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="message" type="string"><Description><![CDATA[- the message to log.]]></Description></Parameter></Parameters></Action><Action name="isConfigEnabled" staticNature="static "><Description><![CDATA[Checks if the given configuration key is true. See Apama documentation for Component.getConfigProperties() and for how to configure the correlator via YAML or command line arguments. If the given key does not exist, this action will return false. This action will return true if the value associated with the configuration key is "true" (case insensitive).]]></Description><Summary><![CDATA[Checks if the given configuration key is true. See Apama documentation for Component.getConfigProperties() and for how to configure the correlator via YAML or command line arguments. If the given key does not exist, this action will return false. This action will return true if the value associated with the configuration key is "true" (case insensitive).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"><Description><![CDATA[true if the configuration option is enabled, false otherwise.]]></Description></Returns><Parameters><Parameter name="key" type="string"><Description><![CDATA[the config key to look up.]]></Description></Parameter></Parameters></Action></Type></Package></Packages>